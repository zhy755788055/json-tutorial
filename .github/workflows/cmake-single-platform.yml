# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Each Subdirectory  
      run: |  
        mkdir output
        # 遍历所有子目录  
        find . -maxdepth 1 -type d | while read dir; do  
          # 检查该目录中是否存在CMakeLists.txt  
          if [ -f "$dir/CMakeLists.txt" ]; then  
            echo "Found CMakeLists.txt in $dir"  
            # 在该目录下创建build目录  
            mkdir -p "$dir/build"  
            # 进入build目录  
            cd "$dir/build"  
            # 执行CMake并配置构建  
            cmake ..  
            # 编译项目  
            make
            # 执行
            # ./leptjson_test > result.txt 2>&1
            # 复制可执行文件
            mkdir ../../output/$dir
            cp leptjson_test ../../output/$dir
            #cp result.txt ../../output/$dir
            # 返回上一级目录  
            cd ../..  
          fi  
        done  

    - name: Upload artifacts  
      # 将打包文件作为构建产物保存  
      uses: actions/upload-artifact@v4
      with:  
        name: build-artifacts  
        path: output
